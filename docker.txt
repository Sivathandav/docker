#Q1 FILE MANIPULATION

chmod +x script.sh
 (executable file)

SCRIPT:
echo Welcome to File Manipulation
echo Enter a file name:
read filename
echo Creating file
echo file created successfully!
touch $filename
echo "1.View File - V"
echo "2.Update Filename - U"
echo "3.Insert Text - I"
echo "4.Search - S"
echo "5.Delete File - D"
echo "6.Exit - E"
while true;
do
echo Enter your choice : 
read choice
case "$choice" in
	"v") cat  $filename
	"u") echo new filename:
		read newfile
		mv $filename $newfile
		filename=$newfile
	"i") echo enter text:
		read text
		echo $text > $filename
	"s") echo Searching....
	"d") rm $filename


# line and word count 

echo Enter the filename
read file
c=`cat $file | wc -c`
w=`cat $file | wc -w`
l=`grep -c "." $file`
echo Number of characters in $file is $c
echo Number of words in $file is $w
echo Number of lines in $file is $l

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Q2 JENKINS

Java Intsallation in ubuntu:
sudo apt install openjdk-17-jre-headless
sudo apt install git

Install jenkins through : java -jar jenkins.war (download war file from jenkins website)
Set up ur account with administrator password
Install suggested plugins
Give Ctrl+Z and stop 
now run ---> java -jar jenkins.war --logfile=/home/USER/jenkins.log  (replace with ur USER, *to track server logs)

To transfer Jenkins server log from local to remote
scp "jenkins.log" "user@ipaddress":"remotelog.txt"

jenkins.txt (pipeline file) :

pipeline {
  agent any
  stages {
    stage('version') {
      steps {
	echo 'Stage Version'
        
      }
    }
    stage('hello') {
      steps {
	echo 'Stage Hello'
        sh 'javac Test.java'
	sh 'java Test'
      }
    }
  }
}



Test.java :

class Test
{
    public static void main(String []args)
    {
        System.out.println("Hello World!!");
    }
};


(LINUX COMMANDS)
hostname -I --> ip address
whoami ---> username

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Q3 SSH REMOTE-LOCAL CONNECTION


ssh-keygen -t rsa -b 2048
ssh-copy-id username@ip
--create a test.sh in remote system
ssh username@ip 'bash ~/test.sh'

To transfer file from remote to local: (write this command in a script file--> script.sh)
scp "username@ip":"filename_remote" "filename_local"
Then run the script file ---> bash script.sh

To send file from local to remote: (write this command in a script file--> script.sh)
scp "filename_local" "username@ip":"filename_remote"
Then run the script file ---> bash script.sh

to install SSH(if not present):

sudo apt install openssh-server
sudo systemctl start ssh
sudo systemctl enable ssh
sudo apt install openjdk-17-jdk

-----------------------------------------------------------------------------------------------------------------------------------------------------------------




#Q4 DOCKER 


(!CHANGES!) THERE ARE TWO COMMANDS (sudo snap install docker and sudo apt install docker.io)
sudo snap install docker.io
docker build -t myapp .

###############################################################################################

If u see docker.sock error, cd ../.. (return to base directory)
cd /var
cd /run
sudo chmod 666 docker.sock
(!CHANGES!) (This can be modified to sudo chmod 666 /var/run/docker.sock)

Another way to solve permission error
sudo usermod -aG docker$USER
newgrp docker

################################################################################################

docker run -d -p 5000:5000 myapp

docker tag myapp/app deepsh0203/app:latest
docker push deepsh0203/app:latest
docker pull deepsh0203/app:latest

Incase if Docker push,pull mentioned in question
deepsh0203 is Dockerhub username, create one for u
myapp-repo name
app-image name



app.py :

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from Flask!"

if __name__ == "__main__":
    app.run(host="0.0.0.0",port=5000)
(!CHANGES!) (You can add endpoints if u want)


CODE2 app.py (GET METHOD): 

from flask import Flask,jsonify

app = Flask(__name__)

students = [
    {"id":1,"name":"Dennis","age":20,"Major":"Computer Science"},
    {"id": 2, "name": "Harish", "age": 20, "major": "Mathematics"},
    {"id": 3, "name": "Badri", "age": 20, "major": "Machine Learning"}
]


@app.route("/")
def home():
    return "Hello World"

@app.route("/students",methods=["GET"])
def getStudents():
    return jsonify(students)

@app.route("/students/<int:studentId>",methods=["GET"])
def getStudent(studentId):
    student=None
    for i in students:
        if i["id"]==studentId:
            student=i
            break
    if student!=None:
        return jsonify(student)
    else:
        return jsonify({"error":"Student not found"}),404


if __name__=='__main__':
    app.run("0.0.0.0",5000)


Dockerfile:

# Use the official Python image
FROM python:3.9

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install -r requirements.txt

# Make port 5000 available to the world outside this container
EXPOSE 5000

# Define environment variable
ENV NAME=FlaskApp

# Run app.py when the container launches
CMD ["python", "app.py"]


requirements.txt:

Flask==2.3.3
Werkzeug==2.3.3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Q5 VERSION CONTROL

mkdir GitEx
cd GitEx

git init
git config --global user.name "Name"
git config --global user.email "name@gmail.com"

touch app.py

Add print statement in app.py
code .
git add .
git commit -m "initial commit"
git switch -c branch1

Go to app.py, change the print statement

git commit -am "First commit on branch1"
git switch master

Change print stmt in app.py
git commit -am "Second commit on master"
git merge branch1

(You could see conflict error here)

Go to VSCode, choose any one option
git commit -am "Fixed Merge Conflict"
Conflict Resolved and Merged

git log --oneline
(To view commits)





----------------------------------------------------------------------------------------------------------------------


Sure! Below is a step-by-step guide on how to install Docker on different operating systems: Ubuntu, Windows, and macOS.

### Docker Installation on Ubuntu (Linux)

1. **Update the apt package index:**
   First, ensure that your package index is up-to-date.

   ```bash
   sudo apt-get update
   ```

2. **Install prerequisites:**
   Install packages required to use Docker’s repository over HTTPS.

   ```bash
   sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
   ```

3. **Add Docker’s official GPG key:**
   This ensures the authenticity of the packages.

   ```bash
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
   ```

4. **Add Docker’s official repository:**
   This adds the Docker repository to your apt sources list.

   ```bash
   sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
   ```

5. **Update apt package index again:**
   Now, update the package index to include the Docker packages.

   ```bash
   sudo apt-get update
   ```

6. **Install Docker CE (Community Edition):**
   Install Docker from the official repository.

   ```bash
   sudo apt-get install docker-ce
   ```

7. **Verify Docker installation:**
   After installation, check if Docker is installed and running.

   ```bash
   sudo systemctl status docker
   ```

   You should see that Docker is active and running. If it’s not running, you can start Docker manually with:

   ```bash
   sudo systemctl start docker
   ```

8. **Run Docker without `sudo` (optional):**
   By default, Docker requires sudo privileges. You can add your user to the Docker group to avoid using `sudo` each time:

   ```bash
   sudo usermod -aG docker $USER
   ```

   After running this command, log out and log back in, or restart your machine.

9. **Test Docker installation:**
   Run the `hello-world` Docker image to verify the installation.

   ```bash
   docker run hello-world
   ```

---

### Docker Installation on Windows

1. **Download Docker Desktop for Windows:**
   - Go to the official Docker website: [Docker Desktop for Windows](https://www.docker.com/products/docker-desktop)
   - Download the installer for Windows.

2. **Install Docker Desktop:**
   - Run the installer you just downloaded.
   - Follow the on-screen instructions, including enabling WSL 2 (Windows Subsystem for Linux version 2), which is required for Docker on Windows.
   
3. **Enable WSL 2 and Virtualization (if necessary):**
   Docker Desktop requires WSL 2 and virtualization to be enabled. If you haven’t done this already:
   - Install WSL 2: [WSL 2 Installation Guide](https://docs.microsoft.com/en-us/windows/wsl/install)
   - Ensure virtualization is enabled in BIOS. You can check if virtualization is enabled by running `systeminfo` in PowerShell.

4. **Launch Docker Desktop:**
   After installation, search for Docker in the Start Menu and launch Docker Desktop. Docker will start running in the background.

5. **Verify Docker installation:**
   Open PowerShell or Command Prompt and type:

   ```bash
   docker --version
   ```

   This should display the installed Docker version.

6. **Run the Docker “hello-world” container:**
   To verify that Docker is working properly, run:

   ```bash
   docker run hello-world
   ```

   This will download a test image and run it.

---

### Docker Installation on macOS

1. **Download Docker Desktop for macOS:**
   - Visit [Docker Desktop for Mac](https://www.docker.com/products/docker-desktop) and download the `.dmg` file.

2. **Install Docker Desktop:**
   - Open the `.dmg` file and drag the Docker icon into your Applications folder.

3. **Launch Docker:**
   - Open Docker from the Applications folder.
   - Docker will run in the background, and you should see the Docker icon in your menu bar.

4. **Verify Docker installation:**
   Open a terminal and type:

   ```bash
   docker --version
   ```

   This should display the Docker version installed.

5. **Run Docker "hello-world" container:**
   To ensure everything is set up correctly, run:

   ```bash
   docker run hello-world
   ```

   This command will pull the test image and print a message confirming the installation.

---

### Additional Notes:
- **Uninstalling Docker:**
   - On Linux: `sudo apt-get purge docker-ce`
   - On Windows: Uninstall via the "Add or Remove Programs" interface.
   - On macOS: Drag Docker to the Trash.

- **Docker Compose (Optional, for multi-container applications):**
   If you need Docker Compose, you can install it separately on Linux using:

   ```bash
   sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
   sudo chmod +x /usr/local/bin/docker-compose
   ```

   Verify the installation with:

   ```bash
   docker-compose --version
   ```

That's it! You should now have Docker running on your system. Feel free to ask if you run into any issues.





